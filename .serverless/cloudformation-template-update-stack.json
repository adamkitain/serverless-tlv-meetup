{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "HelloWorldLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-tlv-meetup-demo-dev-helloWorld"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "serverless-tlv-meetup-demo",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-tlv-meetup-demo-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-tlv-meetup-demo-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-tlv-meetup-demo",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "HelloWorldLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-tlv-meetup-demo/dev/1578043960510-2020-01-03T09:32:40.510Z/serverless-tlv-meetup-demo.zip"
        },
        "FunctionName": "serverless-tlv-meetup-demo-dev-helloWorld",
        "Handler": "functions/hello_world.handle",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 6,
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-07a8a72e15d952210"
          ],
          "SubnetIds": [
            "subnet-0379bbf29fb6d8b26",
            "subnet-09f1f430b82479296",
            "subnet-077fdd447a0aec96d",
            "subnet-0316e5892572481a0"
          ]
        }
      },
      "DependsOn": [
        "HelloWorldLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "FunctionsAlb": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "serverless-tlv-meetup-alb",
        "IpAddressType": "ipv4",
        "Scheme": "internal",
        "Type": "application",
        "SecurityGroups": [
          "sg-07a8a72e15d952210"
        ],
        "Subnets": [
          "subnet-0379bbf29fb6d8b26",
          "subnet-09f1f430b82479296"
        ]
      }
    },
    "HttpListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DependsOn": "FunctionsAlb",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "fixed-response",
            "Order": 1,
            "FixedResponseConfig": {
              "StatusCode": 404,
              "ContentType": "application/json",
              "MessageBody": "{ \"errorType\": \"InvalidRoute\" }"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "FunctionsAlb"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    }
  }
}