# DEPLOYMENT ARGS
# sls deploy --region us-east-1

service: serverless-tlv-meetup-demo
frameworkVersion: ">=1.47.0"

provider:
  name: aws
  runtime: python3.7
  region: ${opt:region}
  memorySize: 1024 # optional, in MB, default is 1024
  versionFunctions: false
  vpc:
    securityGroupIds:
      - sg-07a8a72e15d952210
    subnetIds: ${self:custom.subnets}
  environment:
    MYSQL_SECRET_KEY: serverless-tlv-meetup-demo-write-pass
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: "Allow"
      Action:
        - secretsmanager:GetSecretValue
      Resource: "arn:aws:secretsmanager:us-east-1:858732462826:secret:serverless-tlv-meetup-demo-write-pass-??????"
    - Effect: "Allow"
      Action:
        - kms:Decrypt
      Resource: "arn:aws:kms:us-east-1:858732462826:key/524cbbad-4673-4f22-b16a-450c1cf13e7e"

functions:
  helloWorld:
    handler: functions/hello_world.handle
    events:
     - alb:
        listenerArn:
          Ref: HttpListener
        priority: 5
        conditions:
          path: /hello
  getRandomUser:
    handler: functions/get_random_user.handle
    events:
     - alb:
        listenerArn:
          Ref: HttpListener
        priority: 4
        conditions:
          path: /user/random

resources:
  Resources:
    FunctionsAlb:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: serverless-tlv-meetup-alb
        IpAddressType: ipv4
        Scheme: internal
        Type: application
        SecurityGroups:
          - sg-07a8a72e15d952210
        Subnets: ${self:custom.subnets}
    HttpListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      DependsOn: FunctionsAlb
      Properties:
        DefaultActions:
          - Type: fixed-response
            Order: 1
            FixedResponseConfig:
              StatusCode: 404
              ContentType: 'application/json'
              MessageBody: '{ "errorType": "InvalidRoute" }'
        LoadBalancerArn:
          Ref: FunctionsAlb
        Port: 80
        Protocol: HTTP
    PrivateDBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Private DB Subnet Group
        SubnetIds: ${self:custom.subnets}

    DBClusterParameterGroup:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: "parameter group for db"
        Family: 'aurora-mysql5.7'
        Parameters:
          autocommit: 0

    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-mysql
        EngineVersion: 5.7.12
        DatabaseName: sls_demo
        MasterUsername: sls
        MasterUserPassword: demopass
        DBClusterParameterGroupName:
          Ref: DBClusterParameterGroup
        DBSubnetGroupName:
          Ref: PrivateDBSubnetGroup
        VpcSecurityGroupIds:
          - sg-07a8a72e15d952210
    AuroraInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: aurora-mysql
        CopyTagsToSnapshot: false
        MultiAZ: false
        StorageEncrypted: false
        DBInstanceClass: db.t2.small
        DBClusterIdentifier:
          Ref: AuroraCluster

plugins:
  - serverless-plugin-epsagon
  - serverless-python-requirements


custom:
  subnets:
    - subnet-0379bbf29fb6d8b26
    - subnet-09f1f430b82479296
    - subnet-077fdd447a0aec96d
  epsagon:
    token: 8c55ae06-7ac8-4cb0-8302-73f5bf3dd50c
    appName: serverless-tlv-meetup-demo